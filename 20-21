//Selection sort
import java.util.Comparator;

abstract class GeometricObject {
    public abstract double getArea();
}

class Circle extends GeometricObject {
    private double radius;

    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    @Override
    public double getArea() {
        return Math.PI * radius * radius;
    }

    @Override
    public String toString() {
        return "Circle with radius " + radius;
    }
}

class Rectangle extends GeometricObject {
    private double width;
    private double height;

    public Rectangle(double width, double height) {
        this.width = width;
        this.height = height;
    }

    @Override
    public double getArea() {
        return width * height;
    }

    @Override
    public String toString() {
        return "Rectangle with width " + width + " and height " + height;
    }
}

public class SelectionSort {
    public static <E> void selectionSort(E[] list, Comparator<? super E> comparator) {
        for (int i = 0; i < list.length - 1; i++) {
            E currentMin = list[i];
            int currentMinIndex = i;

            for (int j = i + 1; j < list.length; j++) {
                if (comparator.compare(currentMin, list[j]) > 0) {
                    currentMin = list[j];
                    currentMinIndex = j;
                }
            }

            if (currentMinIndex != i) {
                list[currentMinIndex] = list[i];
                list[i] = currentMin;
            }
        }
    }

    public static void main(String[] args) {
        GeometricObject[] list = {
            new Circle(5),
            new Rectangle(4, 5),
            new Circle(5.5),
            new Rectangle(2.4, 5),
            new Circle(0.5),
            new Rectangle(4, 65),
            new Circle(4.5),
            new Rectangle(4.4, 1),
            new Circle(6.5),
            new Rectangle(4, 5)
        };

        // Comparator to compare GeometricObject based on their area
        Comparator<GeometricObject> comparator = (o1, o2) -> Double.compare(o1.getArea(), o2.getArea());

        // Sort the list
        selectionSort(list, comparator);

        // Display sorted elements
        for (GeometricObject geo : list) {
            System.out.println(geo + " with area " + geo.getArea());
        }
    }
}
